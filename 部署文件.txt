" vim: syntax=help      
" vim: iskeyword+=. 
" vim: foldmethod=indent  
" vim: shiftwidth=2 
" vim: softtabstop=2 

!!!使用vim或gvim查看本文档以获得最佳体验
使用 zo 打开光标下一层折叠
使用 zO 打开光标下所有折叠
使用 zr 打开一层折叠  
使用 zR 打开所有折叠
使用 zc 关闭折叠
把光标放在||包裹的字符中间,按ctrl+]快速跳转到对应位置

目录
=====================================
|1| python3.11相关
  |1.1| 安装python3.11
    |1.1.1| 安装前的准备工作
    |1.1.2| 导入 Python LaunchPAD PPA
    |1.1.3| 安装Pythone3.11
    |1.1.4| 安装pip
    |1.1.5| 在 Ubuntu 中切换默认 Python 版本
  |1.2| 虚拟环境vituralenv
    |1.2.1| 安装
    |1.2.2| 创建虚拟环境
|2| 数据库mysql8
  |2.1| 安装
  |2.2| 修改密码
  |2.3| 建表
|3| 前端服务相关
  |3.1| 安装nodejs14
  |3.2| 安装nginx
|4| 修改时区为东八区
|5| 后端服务shoot-server
  |5.1| 部署
    |5.1.1| 上传代码到目录
    |5.1.2| 下载项目依赖
    |5.1.3| 修改启动脚本
  |5.2| 启动和停止
  |5.3| 日志
  |5.4| 首次启动后需要添加管理员账户
  |5.5| 参数修改说明
    |5.5.1| 数据库
    |5.5.2| 串口修改
    |5.5.3| websocket
|6| 前端服务shoot-ui
  |6.1| 部署
    |6.1.1| 上传代码到目录
    |6.1.2| 修改启动脚本
    |6.1.3| 生产模式
  |6.2| 启动和停止
  |6.3| 修改后端访问地址
  |6.4| 语音报靶相关
    |6.4.1| 修改枪声音频
    |6.4.2| 音频和中文对应关系
=====================================

      

*1* python3.11相关

  *1.1* 安装python3.11
    请见:https://www.sysgeek.cn/install-python-3-11-ubuntu/
    以下作为本地备份

    *1.1.1* 安装前的准备工作

      1. 更新 Ubuntu
        sudo apt update
        sudo apt upgrade

      2. 安装依赖以及生成密钥目录
        sudo apt install ca-certificates apt-transport-https software-properties-common lsb-release -y
        sudo gpg --list-keys

    *1.1.2* 导入 Python LaunchPAD PPA

      1. 使用以下命令导入 GPG 密钥：
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/deadsnakes.gpg --keyserver keyserver.ubuntu.com --recv-keys F23C5A6CF475977595C89F51BA6932366A755776

      2. 现在 GPG 密钥已成功导入，请使用以下命令导入 LaunchPAD PPA：
      echo "deb [signed-by=/usr/share/keyrings/deadsnakes.gpg] https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/python.list

      3. 在继续之前，运行 APT 更新以确保新导入的 PPA 包能够刷新。
      sudo apt update

    *1.1.3* 安装Pythone3.11

      sudo apt install python3.11-full
      sudo apt install python3.11-dev

    *1.1.4* 安装pip
      sudo apt install python3-pip

    *1.1.5* 在 Ubuntu 中切换默认 Python 版本

      1. 需要先分别为每个 Python 版本添加符号链接，要执行此操作，请运行以下命令：
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 2
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 3
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.9 4
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.10 5
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.11 6
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.12 7

      2. 要切换到不同的 Python 版本，可以在以下命令中输入要选择的相应数字：
        sudo update-alternatives --config python

  *1.2* 虚拟环境vituralenv

    *1.2.1* 安装
      pip3 install virtualenv

    *1.2.2* 创建虚拟环境
      virtualenv env311 -p /usr/bin/python3.11
                 ^          ^
            虚拟环境名称   指定python版本为3.11,此处为py3.11所在路径

      有时可能需要指定虚拟环境的pip版本，则需要在命令末尾添加
      pip=xx.x.x #指定版本号
      完整命令:
      virtualenv env311 -p /usr/bin/python3.11 pip=23.1.2 #指定pip版本23.1.2
              
*2* 数据库mysql8

  *2.1* 安装
    sudo apt-get update  #更新源
    sudo apt-get install mysql-server #安装

  *2.2* 修改密码
    mysql #首次进入mysql

    use mysql;
    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root'; #修改密码为root
    flush privileges;

  *2.3* 建表
    需要事先建立一个名称为'shoot'的空数据库，然后运行后端服务，将自动建表。

*3* 前端服务相关

  *3.1* 安装nodejs14
    curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
    curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -

    sudo vim /etc/apt/sources.list
    在末尾添加
    deb https://mirrors.ustc.edu.cn/nodesource/deb/node_14.x stretch main
    deb-src https://mirrors.ustc.edu.cn/nodesource/deb/node_14.x stretch main

    sudo apt install nodejs

  *3.2* 安装nginx
    sudo apt update
    sudo apt install nginx
    验证安装完成
    systemctl status nginx


*4* 修改时区为东八区

  sudo timedatectl set-timezone Asia/Shanghai
  若提示
  Failed to set time zone: Access denied
  则登录为root用户:
  su root -
  然后再执行修改命令
  执行完成后使用命令exit退回普通用户

*5* 后端服务shoot-server

  *5.1* 部署

    *5.1.1* 上传代码到目录
      cd ~
      mkdir shoot-server
      在此目录下上传后台服务代码项目代码以及启动脚本

    *5.1.2* 下载项目依赖

      根据|1.2.2|在此目录下创建虚拟环境env311

      # 进入虚拟环境
      source env311/bin/activate 
      # 下载项目依赖
      pip install -r requirment.txt 

      !!!: 部分依赖需要安装python-dev才能构建,在|1.1|中需要下载3.11版本的python-dev 

    *5.1.3* 修改启动脚本

    1.修改路径
    sudo vim ~/shoot-server/shoot-server.sh
    找到
    ------------------------------------
    APP_DIR=/home/firefly/shoot-server
    VENV_DIR=env311
    ------------------------------------
    修改路径为项目实际路径

    2.添加执行权限
    sudo chmod +x shoot-server.sh

  *5.2* 启动和停止
    cd ~/shoot-server
    启动：sudo ./shoot-server.sh start
    停止：sudo ./shoot-server.sh stop
    重启：sudo ./shoot-server.sh restart
    直接启动：
    cd ~/shoot-server
    source env311/bin/activate
    python -m flask run --host=0.0.0.0
    deactivate

    !!!: 
    1.如果使用sudo和启动脚本启动过,那可能直接启动会失败,需要执行如下命令:
    sudo chmod 666 ~/shoot-server/log/info/shoot.log
    给shoot.log文件赋予普通用户的写权限

    2.若要指定端口应添加启动命令,如下命令将在端口8888启动服务
    python -m flask run --host=0.0.0.0 --port=8888
    修改后前端的访问端口要改，请见|6.3|

    3.如果要看串口的收发数据就使用直接启动,因为收发数据很频繁，数据量大，我就没写入日志，用的print打印。

    接口文档地址: http://localhost:5000/apidocs 
    也可输入局域网地址访问,如:
      http://192.168.2.179:5000/apidocs 

  *5.3* 日志
    日志在~/shoot-server/log文件夹下。
    日志保存7天。
    error文件夹只保存error级别的日志，info文件夹保存info、warning、error级别日志。
    当天的日志保存在shoot.log文件,之前的日志以日期做结尾如：shoot.log.2023-06-15.log

  *5.4* 首次启动后需要添加管理员账户:
    1.访问http://localhost:5000/apidocs
    2.找到auth模块中的register模块
    3.点击try it out
    4.输入框中输入如下数据：
        {
          "password": "123456",
          "username": "admin",
          "role_id": "admin"
        }
        后点击excute.
    5.返回值为：
       {
          "code": 20000,
          "data": null,
          "msg": "registered successful"
       }
       则说明注册成功.

  *5.5* 参数修改说明：

    *5.5.1* 数据库
      sudo vim ~/shoot-server/flaskr/__init__.py
      找到
      ---------------------------------------------------------------------------------------------
      app.config.from_mapping(
          SECRET_KEY='dev',
          SQLALCHEMY_DATABASE_URI='mysql+pymysql://root:root@127.0.0.1:3306/shoot?charset=utf8',
          SQLALCHEMY_POOL_RECYCLE=1800,
          SQLALCHEMY_POOL_TIMEOUT=1500,
          SQLALCHEMY_ENGINE_OPTIONS={'pool_pre_ping': True},
          SQLALCHEMY_ECHO=True,
      )
      ---------------------------------------------------------------------------------------------
      约在58行，输入 58gg 快速跳转
      修改这一行:
      SQLALCHEMY_DATABASE_URI='mysql+pymysql://root:root@127.0.0.1:3306/shoot?charset=utf8',
  
      e.g:SQLALCHEMY_DATABASE_URI='mysql+pymysql://{username}:{password}@127.0.0.1:3306/{database}?charset=utf8',
  
    *5.5.2* 串口修改
      sudo vim ~/shoot-server/flaskr/MySerial/SerialListener.py
      找到
      ---------------------------------------------------------------------------------------------------------------------
      async def start_listen_serial():
          try:
              transport, protocol = await serial_asyncio.create_serial_connection(asyncio.get_event_loop(), lambda: handle,
                                                                                  '/dev/mySerial', 9600)
      ---------------------------------------------------------------------------------------------------------------------
      约在75行，输入 75gg 快速跳转
      修改串口名称为实际名称 e.g. 'dev/mySerial' --> 'ttysWK2'

    *5.5.3* websocket
      sudo vim ~/shoot-server/flaskr/__init__.py
      找到
      ---------------------------------------------------------------------------------------------------------------------
      server = WebSocketServer(port=9001, name='front')
      ---------------------------------------------------------------------------------------------------------------------
      约在19行，输入 19gg 快速跳转
      修改端口，同时前端的端口也要修改，参照|6.3|，注意仅可修改端口，name不可修改。

*6* 前端服务shoot-ui

  *6.1* 部署
    *6.1.1* 上传代码到目录
      cd ~
      mkdir shoot-ui
      在此目录下上传后台服务代码项目代码以及启动脚本

    *6.1.2* 修改启动脚本

      1.修改路径
      sudo vim ~/shoot-ui/shoot-ui.sh
      找到
      ------------------------------
      APP_DIR=/home/firefly/shoot-ui
      ------------------------------
      修改路径为项目实际路径

      2.添加执行权限
      sudo chmod +x shoot-ui.sh

    *6.1.3* 生产模式
      为提高启动速度,项目正式上线后应使用生产模式,采用nginx部署
      nginx的下载请参照|3.2|

      1.打包项目
        cd ~/shoot-ui
        npm run build:prod
        构建完成后会在当前目录生产dist目录

      2.修改nginx配置文件
        sudo vim /etc/nginx/sites-enabled/default
        找到
        -------------------
        root /var/www/dist;
        -------------------
        修改为dist实际路径
        e.g:
        root /home/firefly/shoot-ui/dist;

        然后访问http://localhost即可访问到本项目


  *6.2* 启动和停止
    cd ~/shoot-ui
    启动：sudo ./shoot-ui.sh start
    停止：sudo ./shoot-ui.sh stop
    重启：sudo ./shoot-ui.sh restart
    ps:执行启动脚本会马上显示启动成功，但是可能还在构建，所以可能要等一会。
    直接启动：
    cd ~/shoot-ui
    sudo npm run dev
    地址: http://localhost:9000

  *6.3* 修改后端访问地址
    如果要通过局域网访问前端，需要修改后台的请求地址。共需要修改三处文件。修改后无需重启服务，但可能需要刷新网页。

    1. api请求地址

      sudo vim ~/shoot-ui/src/utils/request.js
      找到
      -----------------------------------------------------------------------------  
      const service = axios.create({
        // baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url
        baseURL: 'http://192.168.2.179:5000', // url = base url + request url
        // baseURL: '/backend', // url = base url + request url
        withCredentials: true, // send cookies when cross-domain requests
        timeout: 5000 // request timeout
      })
      -----------------------------------------------------------------------------  
      修改baseURL为本机局域网地址，如上所示

    2.下载文件地址 

      sudo vim ~/shoot-ui/src/utils/download-request.js
      找到
      -----------------------------------------------------------------------------  
      const service = axios.create({
        // baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url
        // url = base url + request url
        baseURL: 'http://192.168.2.179:5000',
        withCredentials: true, // send cookies when cross-domain requests
        // request timeout
        timeout: 5000,
        responseType: 'blob'
      })
      -----------------------------------------------------------------------------  
      修改baseURL为本机局域网地址，如上所示

    3. websocket地址 

      sudo vim ~/shoot-ui/src/views/shoot/Shoot.vue

      找到
      -----------------------------------------------------------------------------  
      initSocket() {
        // const socket = new WebSocket('ws://localhost:10250')
        const socket = new WebSocket('ws://192.168.2.179:9001')
      -----------------------------------------------------------------------------  
      修改websocket地址为本机局域网地址，如上所示
      ps: 约在447行，输入命令 447gg 快速跳转

  *6.4* 语音报靶相关
    *6.4.1* 修改枪声音频

      1. 添加音频文件
        cd ~/shoot-ui/src/assets/audio/
        在此目录添加枪声文件。
        如果不想修改代码，就替换gunshot-short.wav文件
        否则就参考第2点修改代码
  
      2. 修改代码
        sudo vim ~/shoot-ui/src/views/shoot/Shoot.vue
        找到
        -----------------------------------------------------------------------------  
        onHit(score) {
          if (this.mockGunShot) {
            let audio = new Audio(require('@/assets/audio/gunshot-short.wav'))
            audio.play()
            audio.addEventListener('ended', () => {
              this.reportTarget(score)
            })
          } else {
            this.reportTarget(score)
          }
        },
        -----------------------------------------------------------------------------  
        修改枪声音频文件名
        ps: 约在327行，输入命令 327gg 快速跳转

    *6.4.2* 音频和中文对应关系
      为了便于辨识,音频的命名采用拼音命名，拼音即为音频文件的语音内容。
      音频文件夹即对应内容如下:
      cd ~/shoot-ui/src/assets/audio 
      common: 存放通用音频 e.g: jizhong.wav 击中
      clock: 存放十二点钟方位的音频 e.g: 1dianzhong.wav 一点钟
      direction: 存放方向方位的音频 e.g: dongbei.wav 东北
      ring_number: 存放环数的音频 e.g: 1.1.wav 一点一

      
